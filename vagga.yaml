_templates:
  local_volumes: &local_volumes
    /config: !BindRO /work/config

containers:
  _base_alpine:
    setup:
      - !Alpine v3.4
      - !AlpineRepo {branch: edge, repo: main, tag: main}
      - !AlpineRepo {branch: edge, repo: testing, tag: testing}
      - !AlpineRepo {branch: edge, repo: community, tag: community}
      - !EnsureDir /config
      - !Sh "chmod +r /bin/bbsuid"

  frontend:
      setup:
      - !Container _base_alpine
      - !NpmDependencies
        file: package.json
        peer: true
        optional: true
        dev: true
      - !Sh "ln -s /usr/bin/nodejs /usr/local/bin/node"
      environ:
        NODE_PATH: /usr/lib/node_modules

  mysql:
    setup:
      - !Container _base_alpine
      - !Install
        - mariadb
        - mariadb-client
    volumes:
      <<: *local_volumes
      /var/lib/mysql: !Persistent {name: mysql, init-command: _init_db}

  nginx:
    setup:
      - !Container _base_alpine
      - !Install [nginx]
    volumes:
      <<: *local_volumes
      /var/log/nginx: !Snapshot

  php:
    setup:
      - !Alpine v3.4
      - !AlpineRepo {branch: edge, repo: main, tag: main}
      - !AlpineRepo {branch: edge, repo: testing, tag: testing}
      - !AlpineRepo {branch: edge, repo: community, tag: community}
      - !Install
        - libwebp@main
        - php5-fpm
        - libressl@main
        - php7-fpm@community
        - php7-mysqli@community
        - php7-pdo@community
        - php7-json@community
        - php7-ctype@community
        - php7-session@community
        - php7-gd@community
      - !ComposerDependencies
      - !EnsureDir /log
      - !EnsureDir /config
    environ:
      CI_ENV: development
      COMPOSER_DIR: /usr/local/lib/composer
    volumes:
      <<: *local_volumes
      /log: !Persistent {name: php_log}
      /var/log: !Snapshot


commands:
  _init_db: !Command
    description: Initialize MySQL database
    container: mysql
    environ:
      DB_HOST: 127.0.0.1
      DB_DATABASE: ponydays
      DB_USERNAME: ponydays
      DB_PASSWORD: ponydays
    run: |
      mysql_install_db
      mysqld_safe --defaults-extra-file=/config/mysql.conf --skip-syslog --no-auto-restart
      while [ ! -f /tmp/mysqld.pid ]; do sleep 0.1; done
      mysqladmin --defaults-extra-file=/config/mysql.conf create $DB_DATABASE
      mysql --defaults-extra-file=/config/mysql.conf -e "CREATE USER '$DB_USERNAME'@'$DB_HOST' IDENTIFIED BY '$DB_PASSWORD';"
      mysql --defaults-extra-file=/config/mysql.conf -e "GRANT ALL PRIVILEGES ON $DB_DATABASE.* TO '$DB_USERNAME'@'$DB_HOST';"
      mysqladmin --defaults-extra-file=/config/mysql.conf flush-privileges
      mysqladmin --defaults-extra-file=/config/mysql.conf shutdown
      mysql --defaults-extra-file=/config/mysql.conf -u$DB_USERNAME -p$DB_PASSWORD $DB_DATABASE < /work/structure.sql

  mysql: &mysql !Command
    container: mysql
    description: Run mysql database server
    user-id: 1
    external-user-id: 0
    run: mysqld_safe --defaults-extra-file=/config/mysql.conf --skip-syslog --console --debug-gdb

  mysql-test: &mysql-test !Command
      container: mysql
      description: Run mysql database server
      user-id: 1
      external-user-id: 0
      run: mysql -h 127.0.0.1 --port 3306 -u $DB_USERNAME -p$DB_PASSWORD  $DB_DATABASE



  nginx-prod: &nginx-prod !Command
      container: nginx
      description: Run nginx webserver
      run: nginx -c /config/nginx-prod.conf

  nginx-dev: &nginx-dev !Command
      container: nginx
      description: Run nginx webserver
      run: nginx -c /config/nginx-dev.conf

  php: &php !Command
    container: php
    description: Run php-fpm (application)
    user-id: 1
    external-user-id: 0
    run: |
      php-fpm7 -version
      php-fpm7 -e -F -O -y /config/php-fpm.conf
      echo

  _clean-old-static: !Command
    container: frontend
    description: Clean static files
    run: |
      mkdir -vp /work/static
      rm -rf /work/static/*

  build-static: !Command
    prerequisites: [_clean-old-static]
    container: frontend
    description: Build static files
    run: [npm, run-script, webpack:trunk]

  watch-static: !Command
    prerequisites: [_clean-old-static]
    container: frontend
    description: Watch and auto-rebuild changed static files
    run: [npm, run-script, webpack:watch]

  run-prod: !Supervise
      description: Run full server stack
      kill-unresponsive-after: 5
      children:
        mysql: *mysql
        nginx: *nginx-prod
        php: *php

  run-dev: !Supervise
        description: Run full server stack
        kill-unresponsive-after: 5
        children:
          mysql: *mysql
          nginx-dev: *nginx-dev
          php: *php

  bash: !Command
      container: mysql
      description: Watch and auto-rebuild changed static files
      run: [sh]
